{"version":3,"file":"firebase.service.js","sourceRoot":"","sources":["firebase.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { OpaqueToken, Provider, provide, Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscriber } from 'rxjs/Subscriber';\n\nimport * as firebase from 'firebase';\n\n\n// Factory and provider for a default firebease app...\nexport const DEFAULT_FIREBASE_APP_CONFIG = new OpaqueToken('DEFAULT_FIREBASE_APP_CONFIG');\nexport const DEFAULT_FIREBASE_APP = new OpaqueToken('DEFAULT_FIREBASE_APP');\n\nlet defaultFirebaseAppFactory = (config: Object): firebase.app.App => {\n    let app: firebase.app.App;\n    try {\n        return firebase.app();\n    } catch(e) {\n        app = firebase.initializeApp(config);\n    }\n    return app;\n}\n\nexport let defaultFirebaseAppProvider = provide(DEFAULT_FIREBASE_APP, {\n    useFactory: defaultFirebaseAppFactory,\n    deps: [DEFAULT_FIREBASE_APP_CONFIG]\n});\n\n\n// An interface for data retrieved as a scalar, an object or an array element...\nexport interface FirebaseObjectRecord {\n    $key: string,\n    $ref(): firebase.database.Reference;\n    $value: any;\n}\nfunction firebaseObjectRecordFactory(snap: firebase.database.DataSnapshot): FirebaseObjectRecord {\n    let value = snap.val();\n    if (value !== null && typeof value === 'object'){\n        value.$key = snap.key;\n        value.$ref = () => { return snap.ref; };\n        value.$value = null;\n    } else {\n        value = {\n            $key: snap.key,\n            $ref: () => { return snap.ref; },\n            $value: value\n        };\n    }\n    return value;\n\n}\n\n// grab an observable on an object...\nexport function firebaseObjectObservableFactory(ref: firebase.database.Reference): Observable<FirebaseObjectRecord> {\n    return Observable.create((subscriber: Subscriber<any>) => {\n        let listenFn = ref.on('value', (snap: firebase.database.DataSnapshot) => {\n            let value = firebaseObjectRecordFactory(snap);\n            subscriber.next(value);\n        }, err => {\n              if (err) {\n                  subscriber.error(err);\n                  subscriber.complete();\n              }\n        });\n        return () => {\n            ref.off('value', listenFn);\n        };\n    });\n}\n\n// grab an observable on an array...\nexport function firebaseArrayObservableFactory(ref: firebase.database.Reference | firebase.database.Query): Observable<FirebaseObjectRecord[]> {\n\n    return Observable.create((subscriber: Subscriber<any>) => {\n        let listenFn = ref.on('value', (snap: firebase.database.DataSnapshot) => {\n            let arr: Object[] = [];\n            snap.forEach((child: firebase.database.DataSnapshot): boolean =>{\n                let value = firebaseObjectRecordFactory(child);\n                arr.push(value);\n                return false;\n            });\n            subscriber.next(arr)\n        }, err => {\n              if (err) {\n                  subscriber.error(err);\n                  subscriber.complete();\n              }\n        });\n        return () => {\n            ref.off('value', listenFn);\n        };\n    });\n}\n\n\n@Injectable()\nexport class FirebaseObject extends Object  {\n    public obs:any;\n    constructor(ref: firebase.database.Reference){\n        super();\n        this['$key'] = ref.key;\n        this['$ref'] = () => { return ref.ref; };\n        this['$value'] = null;\n        this.obs = firebaseObjectObservableFactory(ref);\n        this.obs.subscribe(o => {\n            let existingProps = Object.getOwnPropertyNames(this);\n            existingProps.forEach((val, key) => {\n                delete this[key];\n            });\n            Object.assign(this, o);\n        });\n    }\n};\n\n\n\n@Injectable()\nexport class FirebaseArray extends Array {\n    public obs:any;\n    constructor(ref: firebase.database.Reference | firebase.database.Query){\n        super();\n        this.obs = firebaseArrayObservableFactory(ref);\n        this.obs.subscribe(items => {\n            this.length = 0;\n            Array.prototype.push.apply(this, items);\n        });\n    }\n};\n"]}