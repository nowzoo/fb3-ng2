{"version":3,"file":"firebase.service.spec.js","sourceRoot":"","sources":["firebase.service.spec.ts"],"names":[],"mappings":";AAAA,wBAMO,uBAAuB,CAAC,CAAA;AAK/B,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,iCAGQ,oBAAoB,CAAC,CAAA;AAE7B,IAAI,WAAgB,CAAC;AACrB,IAAI,gBAAqB,CAAC;AAC1B,IAAI,SAAS,GAAG;IACZ,KAAK,EAAE;QACH,GAAG,EAAE;YACD,KAAK,EAAE,eAAe;SACzB;QACD,GAAG,EAAE;YACD,KAAK,EAAE,gBAAgB;SAC1B;QACD,GAAG,EAAE;YACD,KAAK,EAAE,cAAc;SACxB;KACJ;CACJ,CAAA;AAKD,UAAU,CAAC,UAAC,IAAQ;IAChB,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC;QACjC,2CAA2C;QAC3C,MAAM,EAAE,qBAAqB;QAC7B,UAAU,EAAE,0BAA0B;QACtC,WAAW,EAAE,iCAAiC;QAC9C,aAAa,EAAE,sBAAsB;KACxC,CAAC,CAAC;IACH,gBAAgB,GAAG,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC1C,gBAAgB,CAAC,SAAS,EAAE,CAAC;IAC7B,gBAAgB,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtC,IAAI,EAAE,CAAC;AAGV,CAAC,CAAC,CAAC;AACH,SAAS,CAAC,UAAC,IAAS;IAChB,WAAW,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpC,CAAC,CAAC,CAAC;AAIJ,kBAAQ,CAAC,eAAe,EAAE;IACtB,YAAE,CAAC,6BAA6B,EAAE;QAC9B,gBAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC,CAAC,CAAC;IACH,YAAE,CAAC,6BAA6B,EAAE;QAC9B,gBAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,kBAAQ,CAAC,4BAA4B,EAAE;IACnC,YAAE,CAAE,yBAAyB,EAAE;QAC3B,IAAI,GAAG,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,IAAI,iCAAc,CAAC,GAAG,CAAC,CAAC;QACpC,gBAAM,CAAC,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAC;AACH,kBAAQ,CAAC,2BAA2B,EAAE;IAClC,YAAE,CAAE,yBAAyB,EAAE;QAC3B,IAAI,GAAG,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,IAAI,gCAAa,CAAC,GAAG,CAAC,CAAC;QACnC,gBAAM,CAAC,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IACH,YAAE,CAAE,sBAAsB,EAAE;QACxB,IAAI,GAAG,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,IAAI,gCAAa,CAAC,GAAG,CAAC,CAAC;QACnC,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEjC,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import {\n  beforeEachProviders,\n  describe,\n  expect,\n  it,\n  inject\n} from '@angular/core/testing';\nimport {\n    provide,\n    ReflectiveInjector\n} from '@angular/core';\nimport * as firebase from 'firebase';\nimport {\n    FirebaseObject,\n    FirebaseArray\n}  from './firebase.service';\n\nlet firebaseApp: any;\nlet firebaseDatabase: any;\nlet dbFixture = {\n    posts: {\n        abc: {\n            title: 'My first post'\n        },\n        def: {\n            title: 'My second post'\n        },\n        xyz: {\n            title: 'My last post'\n        }\n    }\n}\n\n\n\n\nbeforeEach((done:any) => {\n    firebaseApp = firebase.initializeApp({\n        //this is a fake app -- we do tests offline\n        apiKey: \"foobar-dhjgdhgdkhgd\",\n        authDomain: \"not-real.firebaseapp.com\",\n        databaseURL: \"https://not-real.firebaseio.com\",\n        storageBucket: \"not-real.appspot.com\"\n    });\n    firebaseDatabase = firebaseApp.database();\n    firebaseDatabase.goOffline();\n    firebaseDatabase.ref().set(dbFixture);\n    done();\n\n\n });\n afterEach((done: any) => {\n     firebaseApp.delete().then(done);\n });\n\n\n\ndescribe('Proof of life', () => {\n    it('should be true that 1 === 1', () => {\n        expect(1 === 1).toBe(true);\n    });\n    it('should be true that 2 !== 1', () => {\n        expect(2 === 1).not.toBe(true);\n    });\n});\n\ndescribe('FirebaseObject#constructor', () => {\n    it ('should create an object', () => {\n        let ref = firebaseDatabase.ref('posts');\n        let posts = new FirebaseObject(ref);\n        expect(typeof posts).toBe('object');\n    })\n});\ndescribe('FirebaseArray#constructor', () => {\n    it ('should create an object', () => {\n        let ref = firebaseDatabase.ref('posts');\n        let posts = new FirebaseArray(ref);\n        expect(typeof posts).toBe('object');\n    });\n    it ('should be array like', () => {\n        let ref = firebaseDatabase.ref('posts');\n        let posts = new FirebaseArray(ref);\n        expect(posts.length).toBeDefined();\n        expect(posts.length).toBe(3);\n\n    })\n})\n"]}